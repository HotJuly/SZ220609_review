1.props
	使用场景:父子组件之间

	父传子:
		1.父组件在子组件的标签上,添加标签属性,将需要传递的数据作为属性值

		2.子组件在自己的配置对象中,添加props属性配置,并声明需要接收的标签属性名

		3.子组件可以通过this直接访问到父组件传递下来的数据

		父组件给子组件传的是数据

	子传父:

		1.父组件在子组件的标签上,添加标签属性,将接收数据的函数作为属性值
			注意点:函数必须声明在父组件的methods中
				methods中函数的this都会被强行修改成当前组件实例对象
					原理:其实Vue就是对methods中,所有的函数都是用了bind方法

		2.子组件在自己的配置对象中,添加props属性配置,并声明需要接收的标签属性名

		3.子组件调用接收到的函数,并向内部传入数据

		4.函数被执行之后,函数内部通过this,可以修改父组件的数据

		父组件给子组件传的是接收数据的函数

2.provide/inject
	使用场景:祖孙之间通信

	1.祖先组件在自己的配置对象中,书写provide配置选项,并将需要暴露的数据放在内部
		建议使用函数格式

	2.后代组件在自己的配置对象中,书写inject配置选项,用于声明需要接收的数据

		注意:
			1.provide和inject的数据,默认是不具有响应式效果的
				如果写成函数形式,就可以将内部的数据变成响应式效果
					其实就是,现将需要具有响应式的数据放到data中,在从data中拿出来暴露出去


3.自定义事件
	自定义事件和原生事件的区别
	原生事件
		1.其实就是一阶段学习的DOM事件,只能用于原生html标签身上
			事件名称由W3C制定

	自定义事件
		1.他是Vue提出的一种事件类型,只能用于组件身上
			事件名称由开发者制定,可以随便写

	v-model
		可以对input标签或者组件使用
		对input框使用
			1.将data中的状态数据,作为input框的默认值进行展示(属性名:value)
				<input type="text" :value="msg">

			2.当用户修改input框的值时,自动修改data中对应的属性值(事件名:input)
    				<input type="text" :value="msg" @input="(event)=>msg=event.target.value">

		对组件使用
			1.将data中的状态数据,作为标签属性在子组件上添加,向下传递数据(默认属性明:value)
   				 <HelloWorld :value="msg" />

			2.父组件会给子组件绑定自定义事件,可以实现子组件修改父组件数据功能(默认事件名:input)
    				<HelloWorld :value="msg" @input="(data)=>msg=data"/>

			注意:可以通过model配置选项,对v-model的默认属性名和默认事件名进行自定义操作

4.找到对应组件实例对象
	$parent->可以获取到父组件的实例对象

	$root->可以获取到根组件的实例对象
		每个组件的$root都是同一个组件,所以可以在root组件身上存储公共数据

	$children->可以获取到由子组件实例对象组成的数组
		该属性中的数组不是响应式的,不要直接操作该数组

	$refs->可以获取到指定标签对应的内容
		该属性内部存储这一个对象,该属性必须配合ref标签属性使用
		对原生标签使用ref
			可以获取到当前标签的真实DOM(原生DOM)
		对组件标签使用ref
			可以获取到当前组件的组件实例

5.$attrs和$listeners
	$attrs
		它存储着一个对象
		该对象中会存储当前组件没有被props接收的标签属性
		他其实就是一个垃圾桶,专门收集没有人要的数据

			标签属性名会成为该对象的属性名,标签属性值会成为该对象的属性值

		扩展:
			v-bind指令,可以接收一个对象,Vue会将该对象的属性名作为标签属性名,属性值作为标签属性值进行展开
			v-bind可以与任何类型的对象配合使用

	$listeners
		他存储着一个对象
		该对象中会存储当前组自身件所有的自定义事件

			自定义事件名会成为该对象的属性名,事件回调函数会成为该对象的属性值
		扩展:
			v-on指令,可以接收一个对象,Vue会将该对象的属性名作为事件名称,属性值作为事件回调函数进行绑定
			v-on可以与任何类型的对象配合使用


		

		
	
	










